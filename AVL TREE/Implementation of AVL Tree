#include <iostream>
using namespace std;
class Node { public:
    int key;
    Node *left;
    Node *right;
    int height;
    Node(int k) {
        key = k;
        left = NULL;
        right = NULL;
        height = 1; } };
int height(Node *N) {
    if (N == NULL)
        return 0;
    return N->height; }
Node *rightRota
}+
te(Node *y) {
    Node *x = y->left;
    Node *T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = height(y->left) +
                height(y->right) + 1;
    x->height = height(x->left) +
                height(x->right) + 1;  return x;}
Node *leftRotate(Node *x) {
    Node *y = x->right;
    Node *T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = height(x->left) +
                height(x->right) + 1;
    y->height = height(y->left) +
                height(y->right) + 1;  return y; }
int getBalance(Node *N) {
    if (N == NULL)
        return 0;
    return height(N->left) -
           height(N->right); }
int maximum(int h1, int h2)
{  if (h1>h2) return h1;
    else return h2;}
Node* insert(Node* node, int key) {
if (node == NULL)
        return new Node(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node ;
    node->height = maximum(height(node->left),
                   height(node->right)) + 1;
    int balance = getBalance(node);  
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);    }
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node); }  return node;}
Node * minValueNode(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left; return current;
}
Node* deleteNode(Node* root, int key) {
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if ((root->left == NULL) || (root->right == NULL)) {
            Node *temp = root->left ?
                         root->left : root->right;
            if (temp == NULL)
            {temp = root;
                root = NULL;  }
            else
                *root = *temp;
            delete(temp);} else {
            Node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);}}
    if (root == NULL)
       return root;
    root->height = maximum(height(root->left),
                   height(root->right)) + 1;
    int balance = getBalance(root);
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 &&  getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root); }
    if (balance < -1 &&
        getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 &&
        getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);  }  return root; }
void inOrder(Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        cout << root->key <<"  ";
        inOrder(root->right); } }
int main() {
    Node *root = NULL;
    int n;
    cout<<"Enter the value of n : "<<endl; cin>>n;
    int values;
    cout<<"Enter the elements of our AVL Trees : "<<endl;
    for(int i=0;i<n;i++) {
        cin>>values;
    root = insert(root, values);  }
    cout<<endl;
    cout << "Preorder traversal of the "
            "constructed AVL tree is \n";
    inOrder(root);
    int del;
    cout<<endl;
    cout<<"Enter the element to be deleted from the AVL Tree : "; cin>>del;
    root = deleteNode(root,del );
    cout << "\nPreorder traversal after"
            " deletion of element \n"; inOrder(root);
    return 0; }
