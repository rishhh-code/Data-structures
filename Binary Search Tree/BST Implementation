#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int d) : data(d), left(NULL), right(NULL) {}};
Node* insert(Node* root, int data) {
    if (!root) return new Node(data);
    if (data <= root->data) root->left = insert(root->left, data);
    else root->right = insert(root->right, data);
    return root;}
Node* deleteDup(Node* root) {
    if (!root) return NULL;
    root->left = deleteDup(root->left);
    root->right = deleteDup(root->right);
    if (root->left && root->left->data == root->data) root->left = root->left->right;
    if (root->right && root->right->data == root->data) root->right = root->right->left;
    return root;
}
void display(Node* root) {
    if (!root) return;
    display(root->left);
    cout << root->data << " ";
    display(root->right);}
int count(Node* root) {
    return root ? 1 + count(root->left) + count(root->right) : 0;}
Node* lca(Node* root, int x, int y) {
    if (!root || root->data == x || root->data == y) return root;
    Node* left = lca(root->left, x, y);
    Node* right = lca(root->right, x, y);
    return left && right ? root : (left ? left : right);}
int minim(Node* root) {
    while (root && root->left) root = root->left;
    return root ? root->data : -1;}
int main() {
    Node* root = NULL;
    int op, data, x, y;
    do {
        cout << "\n1) Insert\n2) Delete duplicates\n3) Count nodes\n4) Find LCA\n5) Find minimum\n6) Exit\n";
        cout << "Enter option: "; cin >> op;
        switch (op) {
            case 1: cout << "Enter data: "; cin >> data; root = insert(root, data); display(root); break;
            case 2: root = deleteDup(root); cout << "Duplicates deleted.\n"; display(root); break;
            case 3: cout << "Node count: " << count(root) << endl; break;
            case 4: cout << "Enter two values: "; cin >> x >> y;
                    if (Node* LCA = lca(root, x, y)) cout << "LCA: " << LCA->data << endl;
                    else cout << "No LCA found.\n"; break;
            case 5: cout << "Minimum value: " << minim(root) << endl; break;
        }} while (op != 6);
    return 0;}
