#include <iostream>
#include <queue>
using namespace std;
int graph[MAX][MAX], adj[MAX][MAX], nodes;
bool visited[MAX];
void DFS(int start) {
    cout << start << " ";visited[start] = true;
    for (int i = 0; i < nodes; i++)
        if (graph[start][i] == 1 && !visited[i]) DFS(i);}
void BFS(int startNode, int n) {queue<int> q;
    visited[startNode] = true;
    q.push(startNode);
    while (!q.empty()) {
        int node = q.front(); q.pop();
        cout << node << " ";
        for (int i = 0; i < n; i++)
            if (adj[node][i] == 1 && !visited[i]) {
                visited[i] = true;  q.push(i); }}}
int main() {int edges, u, v;
    cout << "Enter the number of nodes: "; cin >> nodes;
    cout << "Enter the number of edges: "; cin >> edges;
    for (int i = 0; i < nodes; i++) {visited[i] = false;
        for (int j = 0; j < nodes; j++)
            graph[i][j] = adj[i][j] = 0; }
    cout << "Enter edge (u v): " << endl;
    for (int i = 0; i < edges; i++) {cin >> u >> v;
        graph[u][v] = graph[v][u] = 1;
        adj[u][v] = adj[v][u] = 1; }int startNode;
    cout << "Enter the starting node for DFS: "; cin >> startNode;
    cout << "DFS Traversal starting from node " << startNode << ": ";DFS(startNode);
    for (int i = 0; i < nodes; i++)visited[i] = false;
    cout << "Enter the starting node for BFS: "; cin >> startNode;
    cout << "BFS Traversal starting from node " << startNode << ": ";
    BFS(startNode, nodes); cout << endl; return 0;}
