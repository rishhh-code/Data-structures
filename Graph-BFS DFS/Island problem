#include <iostream>
#define MAX_SIZE 40
using namespace std;
void DFS(char grid[][MAX_SIZE], int i, int j, int rows, int cols) {
    if (i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] == '0') {
        return;
}
grid[i][j] = '0';
    DFS(grid, i + 1, j, rows, cols);  DFS(grid, i - 1, j, rows, cols);
    DFS(grid, i, j + 1, rows, cols); DFS(grid, i, j - 1, rows, cols)}
int numIslands(char grid[][MAX_SIZE], int rows, int cols) {
    int count = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (grid[i][j] == '1') {count++;
             DFS(grid, i, j, rows, cols);}}
    return count;}
int main() {
    char grid[][MA	X_SIZE] = {
        {'0', '0', '0', '0', '0'},
        {'1', '1', '1', '0', '0'},
        {'0', '0', '0', '0', '0'},
        {'0', '0', '0', '0', '0'}
  };
    int rows = sizeof(grid) / sizeof(grid[0]);
    int cols = sizeof(grid[0]) / sizeof(grid[0][0]);
    cout << "Number of islands: " << numIslands(grid, rows, cols) << endl;
    return 0;}    
    };
    int rows = sizeof(grid) / sizeof(grid[0]);
    int cols = sizeof(grid[0]) / sizeof(grid[0][0]);
    cout << "No of islands: " << numIslands(grid, rows, cols) << endl;
    return 0;
}

